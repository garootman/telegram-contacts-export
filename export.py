#!/usr/bin/env python3
"""
Telegram contacts and chats exporter.

This module provides functionality to export Telegram contacts and chats to CSV and JSON formats.
It also supports cross-referencing with a nicknames file to find specific users.
"""

import asyncio
import csv
import json
import os
import sys
from datetime import datetime
from getpass import getpass

from telethon import TelegramClient
from telethon.errors import (
    SessionPasswordNeededError,
    ChatAdminRequiredError,
    ChannelPrivateError,
)
from telethon.tl.functions.contacts import GetContactsRequest
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch, Channel, Chat

SESSION_FILE = "anon.session"
PROGRESS_FILE = "export_progress.json"
CREDENTIALS_FILE = "credentials.json"
NICKNAMES_FILE = "nicknames.txt"


class TelegramExporter:
    """
    Main class for exporting Telegram contacts and chats.

    Handles authentication, data export to CSV/JSON formats,
    and cross-referencing with nicknames file.
    """

    def __init__(self):
        self.api_id = None
        self.api_hash = None
        self.phone = None
        self.client = None
        self.progress = self.load_progress()
        self.credentials = self.load_credentials()

    def load_progress(self) -> dict:
        """Load export progress from file."""
        if os.path.exists(PROGRESS_FILE):
            with open(PROGRESS_FILE, encoding="utf-8") as f:
                return json.load(f)
        return {}

    def load_credentials(self) -> dict:
        """Load saved credentials from file."""
        if os.path.exists(CREDENTIALS_FILE):
            with open(CREDENTIALS_FILE, encoding="utf-8") as f:
                return json.load(f)
        return {}

    def save_credentials(self):
        """Save API credentials to file."""
        credentials = {
            "api_id": self.api_id,
            "api_hash": self.api_hash,
            "phone": self.phone,
        }
        with open(CREDENTIALS_FILE, "w", encoding="utf-8") as f:
            json.dump(credentials, f, ensure_ascii=False, indent=2)
        print(f"üíæ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {CREDENTIALS_FILE}")

    def save_progress(self, export_type: str, data: dict):
        """Save export progress to file."""
        self.progress[export_type] = {
            "timestamp": datetime.now().isoformat(),
            "completed": data.get("completed", 0),
            "total": data.get("total", 0),
            "finished": data.get("finished", False),
        }
        with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
            json.dump(self.progress, f, ensure_ascii=False, indent=2)

    def setup_credentials(self):
        """Set up Telegram API credentials interactively."""
        print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Telegram API")
        print("–ü–æ–ª—É—á–∏—Ç–µ api_id –∏ api_hash –Ω–∞ https://my.telegram.org")
        print("=" * 50)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.credentials:
            print("\nüìã –¢–µ–∫—É—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"API ID: {self.credentials.get('api_id', '–Ω–µ –∑–∞–¥–∞–Ω')}")
            print(
                f"API Hash: {'*' * 10 if self.credentials.get('api_hash') else '–Ω–µ –∑–∞–¥–∞–Ω'}"
            )
            print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {self.credentials.get('phone', '–Ω–µ –∑–∞–¥–∞–Ω')}")

            if input("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ").lower() in [
                "y",
                "yes",
                "–¥–∞",
                "–¥",
            ]:
                self.api_id = self.credentials["api_id"]
                self.api_hash = self.credentials["api_hash"]
                self.phone = self.credentials["phone"]
                return True

        print("\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        self.api_id = input("API ID: ").strip()
        self.api_hash = input("API Hash: ").strip()
        self.phone = input(
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567): "
        ).strip()

        if not all([self.api_id, self.api_hash, self.phone]):
            print("‚ùå –û—à–∏–±–∫–∞: –≤—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
            return False

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_choice = input(
            "\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤? (y/n): "
        ).lower()
        if save_choice in ["y", "yes", "–¥–∞", "–¥"]:
            self.save_credentials()

        return True

    def load_saved_credentials(self):
        """Load previously saved credentials."""
        if self.credentials:
            self.api_id = self.credentials.get("api_id")
            self.api_hash = self.credentials.get("api_hash")
            self.phone = self.credentials.get("phone")
            return True
        return False

    async def create_client(self):
        """Create and authenticate Telegram client."""
        if os.path.exists(SESSION_FILE):
            print(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ {SESSION_FILE}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é")

        self.client = TelegramClient(SESSION_FILE, self.api_id, self.api_hash)

        try:
            await self.client.start(phone=self.phone)
        except SessionPasswordNeededError:
            password = getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
            await self.client.start(phone=self.phone, password=password)

        print("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram!")

    async def export_contacts(self, resume: bool = False):
        """Export Telegram contacts to CSV and JSON files."""
        print("\nüìû –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")

        contacts_result = await self.client(GetContactsRequest(hash=0))
        contacts = contacts_result.users
        total = len(contacts)

        if resume and "contacts" in self.progress:
            completed = self.progress["contacts"].get("completed", 0)
            print(f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –ø–æ–∑–∏—Ü–∏–∏ {completed}/{total}")
        else:
            completed = 0

        contact_list = []

        for i, contact in enumerate(contacts[completed:], completed):
            contact_info = {
                "id": contact.id,
                "first_name": contact.first_name or "",
                "last_name": contact.last_name or "",
                "username": contact.username or "",
                "phone": contact.phone or "",
                "is_bot": contact.bot,
                "is_contact": True,
            }
            contact_list.append(contact_info)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress = int((i + 1) / total * 100)
            print(f"\r–ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{total} ({progress}%)", end="", flush=True)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            if (i + 1) % 10 == 0:
                self.save_progress(
                    "contacts", {"completed": i + 1, "total": total, "finished": False}
                )

        print(f"\n‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {total}")

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        contacts_csv = "telegram_contacts.csv"
        with open(contacts_csv, "w", newline="", encoding="utf-8") as csvfile:
            fieldnames = [
                "id",
                "first_name",
                "last_name",
                "username",
                "phone",
                "is_bot",
                "is_contact",
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(contact_list)

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        with open("telegram_contacts.json", "w", encoding="utf-8") as f:
            json.dump(contact_list, f, ensure_ascii=False, indent=2)

        self.save_progress(
            "contacts", {"completed": total, "total": total, "finished": True}
        )

        print(f"üìÅ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {contacts_csv} –∏ telegram_contacts.json")
        return total

    async def export_chats(self, resume: bool = False):
        """Export Telegram chats to CSV and JSON files."""
        print("\nüí¨ –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤...")

        dialogs = await self.client.get_dialogs()
        user_dialogs = [d for d in dialogs if d.is_user]
        total = len(user_dialogs)

        if resume and "chats" in self.progress:
            completed = self.progress["chats"].get("completed", 0)
            print(f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –ø–æ–∑–∏—Ü–∏–∏ {completed}/{total}")
        else:
            completed = 0

        dialog_list = []

        for i, dialog in enumerate(user_dialogs[completed:], completed):
            entity = dialog.entity
            dialog_info = {
                "id": entity.id,
                "first_name": getattr(entity, "first_name", "") or "",
                "last_name": getattr(entity, "last_name", "") or "",
                "username": getattr(entity, "username", "") or "",
                "phone": getattr(entity, "phone", "") or "",
                "is_contact": getattr(entity, "contact", False),
                "last_message_date": dialog.date.isoformat() if dialog.date else "",
                "unread_count": dialog.unread_count,
            }
            dialog_list.append(dialog_info)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress = int((i + 1) / total * 100)
            print(f"\r–ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{total} ({progress}%)", end="", flush=True)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 —á–∞—Ç–æ–≤
            if (i + 1) % 10 == 0:
                self.save_progress(
                    "chats", {"completed": i + 1, "total": total, "finished": False}
                )

        print(f"\n‚úÖ –ß–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {total}")

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        chats_csv = "telegram_chats.csv"
        with open(chats_csv, "w", newline="", encoding="utf-8") as csvfile:
            fieldnames = [
                "id",
                "first_name",
                "last_name",
                "username",
                "phone",
                "is_contact",
                "last_message_date",
                "unread_count",
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(dialog_list)

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        with open("telegram_dialogs.json", "w", encoding="utf-8") as f:
            json.dump(dialog_list, f, ensure_ascii=False, indent=2)

        self.save_progress(
            "chats", {"completed": total, "total": total, "finished": True}
        )

        print(f"üìÅ –ß–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {chats_csv} –∏ telegram_dialogs.json")
        return total

    async def export_chat_members(self, resume: bool = False):
        """Export all members from all accessible chats and groups."""
        print("\nüë• –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤...")

        dialogs = await self.client.get_dialogs()
        group_dialogs = [d for d in dialogs if d.is_group or d.is_channel]
        total_chats = len(group_dialogs)

        if resume and "chat_members" in self.progress:
            completed_chats = self.progress["chat_members"].get("completed", 0)
            print(f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –ø–æ–∑–∏—Ü–∏–∏ {completed_chats}/{total_chats}")
        else:
            completed_chats = 0

        all_members = []
        processed_chats = 0

        for i, dialog in enumerate(group_dialogs[completed_chats:], completed_chats):
            try:
                entity = dialog.entity
                chat_title = dialog.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                chat_id = entity.id
                chat_type = "channel" if dialog.is_channel else "group"

                print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {chat_type}: {chat_title}")

                if isinstance(entity, (Channel, Chat)):
                    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
                    try:
                        if dialog.is_channel:
                            # For channels, we need to use GetParticipantsRequest
                            participants = await self.client(
                                GetParticipantsRequest(
                                    entity,
                                    ChannelParticipantsSearch(""),
                                    offset=0,
                                    limit=10000,
                                    hash=0,
                                )
                            )
                            members = participants.users
                        else:
                            # For regular groups, use get_participants
                            members = await self.client.get_participants(entity)

                        for member in members:
                            if hasattr(member, "id"):  # Ensure it's a user
                                member_info = {
                                    "chat_id": chat_id,
                                    "chat_title": chat_title,
                                    "chat_type": chat_type,
                                    "user_id": member.id,
                                    "first_name": getattr(member, "first_name", "")
                                    or "",
                                    "last_name": getattr(member, "last_name", "") or "",
                                    "username": getattr(member, "username", "") or "",
                                    "phone": getattr(member, "phone", "") or "",
                                    "is_bot": getattr(member, "bot", False),
                                    "is_premium": getattr(member, "premium", False),
                                    "is_verified": getattr(member, "verified", False),
                                }
                                all_members.append(member_info)

                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

                    except (ChatAdminRequiredError, ChannelPrivateError) as e:
                        print(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º: {e}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

                processed_chats += 1
                progress = int(processed_chats / total_chats * 100)
                print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å —á–∞—Ç–æ–≤: {processed_chats}/{total_chats} ({progress}%)")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 5 —á–∞—Ç–æ–≤
                if processed_chats % 5 == 0:
                    self.save_progress(
                        "chat_members",
                        {
                            "completed": processed_chats,
                            "total": total_chats,
                            "finished": False,
                        },
                    )

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {dialog.title}: {e}")
                processed_chats += 1
                continue

        print(
            f"\n‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {len(all_members)} –∏–∑ {total_chats} —á–∞—Ç–æ–≤"
        )

        if all_members:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            members_csv = "telegram_chat_members.csv"
            with open(members_csv, "w", newline="", encoding="utf-8") as csvfile:
                fieldnames = [
                    "chat_id",
                    "chat_title",
                    "chat_type",
                    "user_id",
                    "first_name",
                    "last_name",
                    "username",
                    "phone",
                    "is_bot",
                    "is_premium",
                    "is_verified",
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(all_members)

            # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
            with open("telegram_chat_members.json", "w", encoding="utf-8") as f:
                json.dump(all_members, f, ensure_ascii=False, indent=2)

            print(
                f"üìÅ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {members_csv} –∏ telegram_chat_members.json"
            )

        self.save_progress(
            "chat_members",
            {"completed": total_chats, "total": total_chats, "finished": True},
        )

        return len(all_members)

    def load_nicknames_list(self):
        """Load list of nicknames from nicknames.txt file."""
        if not os.path.exists(NICKNAMES_FILE):
            print(f"‚ùå –§–∞–π–ª {NICKNAMES_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return set()

        try:
            with open(NICKNAMES_FILE, "r", encoding="utf-8") as f:
                nicknames_set = {line.strip().lower() for line in f if line.strip()}
            print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(nicknames_set)} –Ω–∏–∫–æ–≤ –∏–∑ {NICKNAMES_FILE}")
            return nicknames_set
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {NICKNAMES_FILE}: {e}")
            return set()

    def cross_reference_nicknames_offline(self):
        """Cross-reference contacts and chats with nicknames file."""
        """–°–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —á–∞—Ç—ã —Å —Ñ–∞–π–ª–æ–º nicknames.txt"""
        print("\nüîç –°–≤–µ—Ä–∫–∞ —Å —Ñ–∞–π–ª–æ–º nicknames.txt...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∏–∫–æ–≤
        nicknames_set = self.load_nicknames_list()
        if not nicknames_set:
            return

        matched_contacts = []

        # –°–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
        print("üìû –°–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        try:
            if os.path.exists("telegram_contacts.json"):
                with open("telegram_contacts.json", "r", encoding="utf-8") as f:
                    contacts = json.load(f)
                
                for contact in contacts:
                    username = contact.get("username", "")
                    if username and username.lower() in nicknames_set:
                        contact_info = {
                            "source": "contacts",
                            "found_in_chat": "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
                            "chat_id": "",
                            "id": contact.get("id", ""),
                            "first_name": contact.get("first_name", ""),
                            "last_name": contact.get("last_name", ""),
                            "username": username,
                            "phone": contact.get("phone", ""),
                            "is_bot": contact.get("is_bot", False),
                            "matched_nick": username.lower(),
                        }
                        matched_contacts.append(contact_info)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: @{username}")
            else:
                print("‚ö†Ô∏è –§–∞–π–ª telegram_contacts.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–µ—Ä–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")

        # –°–≤–µ—Ä—è–µ–º —á–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
        print("üí¨ –°–≤–µ—Ä–∫–∞ —á–∞—Ç–æ–≤...")
        try:
            if os.path.exists("telegram_dialogs.json"):
                with open("telegram_dialogs.json", "r", encoding="utf-8") as f:
                    dialogs = json.load(f)
                
                for dialog in dialogs:
                    username = dialog.get("username", "")
                    if username and username.lower() in nicknames_set:
                        dialog_info = {
                            "source": "chats",
                            "found_in_chat": "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                            "chat_id": dialog.get("id", ""),
                            "id": dialog.get("id", ""),
                            "first_name": dialog.get("first_name", ""),
                            "last_name": dialog.get("last_name", ""),
                            "username": username,
                            "phone": dialog.get("phone", ""),
                            "is_contact": dialog.get("is_contact", False),
                            "last_message_date": dialog.get("last_message_date", ""),
                            "unread_count": dialog.get("unread_count", 0),
                            "matched_nick": username.lower(),
                        }
                        matched_contacts.append(dialog_info)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: @{username}")
            else:
                print("‚ö†Ô∏è –§–∞–π–ª telegram_dialogs.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–µ—Ä–∫—É —á–∞—Ç–æ–≤")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ —á–∞—Ç–æ–≤: {e}")

        # –°–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        print("üë• –°–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤...")
        try:
            if os.path.exists("telegram_chat_members.json"):
                with open("telegram_chat_members.json", "r", encoding="utf-8") as f:
                    chat_members = json.load(f)
                
                for member in chat_members:
                    username = member.get("username", "")
                    if username and username.lower() in nicknames_set:
                        member_info = {
                            "source": "chat_members",
                            "found_in_chat": f"{member.get('chat_title', '')} ({member.get('chat_type', '')})",
                            "chat_id": member.get("chat_id", ""),
                            "id": member.get("user_id", ""),
                            "first_name": member.get("first_name", ""),
                            "last_name": member.get("last_name", ""),
                            "username": username,
                            "phone": member.get("phone", ""),
                            "is_bot": member.get("is_bot", False),
                            "is_premium": member.get("is_premium", False),
                            "is_verified": member.get("is_verified", False),
                            "matched_nick": username.lower(),
                        }
                        matched_contacts.append(member_info)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤ {member.get('chat_title', '')}: @{username}")
            else:
                print("‚ö†Ô∏è –§–∞–π–ª telegram_chat_members.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–µ—Ä–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if matched_contacts:
            print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matched_contacts)}")

            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            matched_csv = "telegram_nicknames_matches.csv"
            with open(matched_csv, "w", newline="", encoding="utf-8") as csvfile:
                fieldnames = [
                    "source",
                    "found_in_chat",
                    "chat_id",
                    "id",
                    "first_name",
                    "last_name",
                    "username",
                    "phone",
                    "is_bot",
                    "is_contact",
                    "is_premium",
                    "is_verified",
                    "last_message_date",
                    "unread_count",
                    "matched_nick",
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()

                for contact in matched_contacts:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                    if contact["source"] == "contacts":
                        contact.update(
                            {
                                "last_message_date": "",
                                "unread_count": 0,
                                "is_premium": False,
                                "is_verified": False,
                                "is_contact": True,
                            }
                        )
                    elif contact["source"] == "chats":
                        contact.update({"is_premium": False, "is_verified": False})
                    elif contact["source"] == "chat_members":
                        contact.update(
                            {
                                "is_contact": False,
                                "last_message_date": "",
                                "unread_count": 0,
                            }
                        )
                    writer.writerow(contact)

            # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
            with open("telegram_nicknames_matches.json", "w", encoding="utf-8") as f:
                json.dump(matched_contacts, f, ensure_ascii=False, indent=2)

            print(
                f"üìÅ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {matched_csv} –∏ telegram_nicknames_matches.json"
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            contacts_count = sum(
                1 for c in matched_contacts if c["source"] == "contacts"
            )
            chats_count = sum(1 for c in matched_contacts if c["source"] == "chats")
            chat_members_count = sum(
                1 for c in matched_contacts if c["source"] == "chat_members"
            )
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts_count}")
            print(f"  üí¨ –ß–∞—Ç—ã: {chats_count}")
            print(f"  üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–æ–≤: {chat_members_count}")
            print(f"  üéØ –í—Å–µ–≥–æ: {len(matched_contacts)}")
        else:
            print("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        return len(matched_contacts) if matched_contacts else 0

    def show_menu(self):
        """Display interactive menu and get user choice."""
        print("\n" + "=" * 50)
        print("üöÄ Telegram Data Exporter")
        print("=" * 50)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        session_status = (
            "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if os.path.exists(SESSION_FILE) else "‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–∞"
        )
        credentials_status = "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã" if self.credentials else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

        print("\nüîê –°—Ç–∞—Ç—É—Å:")
        print(f"  –°–µ—Å—Å–∏—è: {session_status}")
        print(f"  –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {credentials_status}")

        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞—Ö
        if self.progress:
            print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞—Ö:")
            for export_type, data in self.progress.items():
                timestamp = datetime.fromisoformat(data["timestamp"]).strftime(
                    "%d.%m.%Y %H:%M"
                )
                status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω" if data.get("finished") else "‚è∏Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω"
                completed = data.get("completed", 0)
                total = data.get("total", 0)
                progress_percent = int(completed / total * 100) if total > 0 else 0

                print(
                    f"  {export_type.capitalize()}: {status} {timestamp} "
                    f"({completed}/{total}, {progress_percent}%)"
                )

        print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram")
        print("2. –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        print("3. –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤")
        print("4. –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤")
        print("5. –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–≥–æ (–∫–æ–Ω—Ç–∞–∫—Ç—ã + —á–∞—Ç—ã + —É—á–∞—Å—Ç–Ω–∏–∫–∏)")
        print("6. –°–≤–µ—Ä–∫–∞ —Å —Ñ–∞–π–ª–æ–º nicknames.txt")
        print("0. –í—ã—Ö–æ–¥")

        return input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ").strip()

    async def ensure_connection(self):
        """Ensure Telegram connection is established."""
        if not all([self.api_id, self.api_hash, self.phone]):
            if not self.load_saved_credentials():
                print(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram (–ø—É–Ω–∫—Ç 1)"
                )
                return False

        if not self.client:
            await self.create_client()

        return True

    async def run(self):
        """Main application loop."""
        try:
            while True:
                choice = self.show_menu()

                if choice == "0":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break

                if choice == "1":
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    if self.setup_credentials():
                        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Telegram...")
                        await self.create_client()
                        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

                elif choice == "2":
                    # –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                    if not await self.ensure_connection():
                        continue

                    resume = False
                    if "contacts" in self.progress and not self.progress[
                        "contacts"
                    ].get("finished", False):
                        resume_choice = input(
                            "–ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
                        ).lower()
                        resume = resume_choice in ["y", "yes", "–¥–∞", "–¥"]

                    await self.export_contacts(resume=resume)

                elif choice == "3":
                    # –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤
                    if not await self.ensure_connection():
                        continue

                    resume = False
                    if "chats" in self.progress and not self.progress["chats"].get(
                        "finished", False
                    ):
                        resume_choice = input(
                            "–ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
                        ).lower()
                        resume = resume_choice in ["y", "yes", "–¥–∞", "–¥"]

                    await self.export_chats(resume=resume)

                elif choice == "4":
                    # –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤
                    if not await self.ensure_connection():
                        continue

                    resume = False
                    if "chat_members" in self.progress and not self.progress[
                        "chat_members"
                    ].get("finished", False):
                        resume_choice = input(
                            "–ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
                        ).lower()
                        resume = resume_choice in ["y", "yes", "–¥–∞", "–¥"]

                    members_count = await self.export_chat_members(resume=resume)
                    print(
                        f"\nüéâ –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                    )

                elif choice == "5":
                    # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–≥–æ
                    if not await self.ensure_connection():
                        continue

                    resume_contacts = False
                    resume_chats = False
                    resume_members = False

                    if "contacts" in self.progress and not self.progress[
                        "contacts"
                    ].get("finished", False):
                        resume_choice = input(
                            "–ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
                        ).lower()
                        resume_contacts = resume_choice in ["y", "yes", "–¥–∞", "–¥"]

                    if "chats" in self.progress and not self.progress["chats"].get(
                        "finished", False
                    ):
                        resume_choice = input(
                            "–ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
                        ).lower()
                        resume_chats = resume_choice in ["y", "yes", "–¥–∞", "–¥"]

                    if "chat_members" in self.progress and not self.progress[
                        "chat_members"
                    ].get("finished", False):
                        resume_choice = input(
                            "–ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
                        ).lower()
                        resume_members = resume_choice in ["y", "yes", "–¥–∞", "–¥"]

                    contacts_count = await self.export_contacts(resume=resume_contacts)
                    chats_count = await self.export_chats(resume=resume_chats)
                    members_count = await self.export_chat_members(
                        resume=resume_members
                    )

                    print("\nüéâ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    print(f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_count}")
                    print(f"üí¨ –ß–∞—Ç–æ–≤: {chats_count}")
                    print(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤: {members_count}")

                elif choice == "6":
                    # –°–≤–µ—Ä–∫–∞ —Å —Ñ–∞–π–ª–æ–º nicknames.txt
                    matches_count = self.cross_reference_nicknames_offline()
                    if matches_count > 0:
                        print(
                            f"\nüéâ –°–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ {matches_count} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
                        )
                    else:
                        print("\nüòû –°–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

        finally:
            if self.client:
                await self.client.disconnect()


def main():
    """Main entry point."""
    if sys.version_info < (3, 7):
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)

    try:
        exporter = TelegramExporter()
        asyncio.run(exporter.run())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

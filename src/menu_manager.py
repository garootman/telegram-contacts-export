"""Menu management for Telegram exporter."""

from datetime import datetime
from typing import Dict, Optional

from session_manager import SessionManager


class MenuManager:
    """Handles menu display and user interaction."""

    def __init__(self, file_manager):
        self.file_manager = file_manager
        self.session_manager = SessionManager()
        self.current_session = None

    def show_main_menu(self) -> str:
        """Display main menu and get user choice."""
        print("\n" + "=" * 50)
        print("üöÄ Telegram Data Exporter")
        print("=" * 50)

        # Show current session status
        if self.current_session:
            session_info = self.session_manager.get_session_info(self.current_session)
            phone = session_info.get("phone", "Unknown")
            print(f"\nüì± –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {self.current_session} ({phone})")
        else:
            print("\n‚ùå –°–µ—Å—Å–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")

        self._show_progress_info()

        print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        if not self.current_session:
            print("1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏")
            print("0. –í—ã—Ö–æ–¥")
        else:
            print("1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏")
            print("2. –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            print("3. –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤")
            print("4. –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤")
            print("5. –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–≥–æ (–∫–æ–Ω—Ç–∞–∫—Ç—ã + —á–∞—Ç—ã + —É—á–∞—Å—Ç–Ω–∏–∫–∏)")
            print("6. –°–≤–µ—Ä–∫–∞ —Å —Ñ–∞–π–ª–æ–º nicknames.txt")
            print("0. –í—ã—Ö–æ–¥")

        return input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ").strip()

    def show_session_menu(self) -> str:
        """Display session management menu."""
        print("\n" + "=" * 50)
        print("üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏")
        print("=" * 50)

        sessions = self.session_manager.list_sessions()

        if sessions:
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:")
            for i, session in enumerate(sessions, 1):
                status = "üü¢" if session["name"] == self.current_session else "‚ö™"
                last_used = session.get("last_used", "Never")
                if last_used != "Never" and last_used != "Unknown":
                    try:
                        dt = datetime.fromisoformat(last_used.replace("Z", "+00:00"))
                        last_used = dt.strftime("%d.%m.%Y %H:%M")
                    except (ValueError, TypeError):
                        pass

                print(
                    f"  {i}. {status} {session['name']} ({session['phone']}) - {last_used}"
                )
        else:
            print("\n‚ùå –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        print("\nüìã –î–µ–π—Å—Ç–≤–∏—è:")
        if sessions:
            print("1-N. –í—ã–±—Ä–∞—Ç—å —Å–µ—Å—Å–∏—é (–Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞)")
        print("N. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
        if sessions:
            print("D. –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é")
        print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        return input("\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip().lower()

    def _show_progress_info(self):
        """Show information about previous exports."""
        progress = self.file_manager.progress
        if progress:
            print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞—Ö:")
            for export_type, data in progress.items():
                timestamp = datetime.fromisoformat(data["timestamp"]).strftime(
                    "%d.%m.%Y %H:%M"
                )
                status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω" if data.get("finished") else "‚è∏Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω"
                completed = data.get("completed", 0)
                total = data.get("total", 0)
                progress_percent = int(completed / total * 100) if total > 0 else 0

                print(
                    f"  {export_type.capitalize()}: {status} {timestamp} "
                    f"({completed}/{total}, {progress_percent}%)"
                )

    def ask_resume(self, export_type: str) -> bool:
        """Ask user if they want to resume incomplete export."""
        progress = self.file_manager.progress
        if export_type in progress and not progress[export_type].get("finished", False):
            resume_choice = input(
                f"–ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç {export_type}. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
            ).lower()
            return resume_choice in ["y", "yes", "–¥–∞", "–¥"]
        return False

    def wait_for_continue(self):
        """Wait for user to press Enter to continue."""
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def handle_session_management(self) -> bool:
        """Handle session management menu. Returns True if session was selected."""
        while True:
            choice = self.show_session_menu()

            if choice == "0":
                return self.current_session is not None

            elif choice == "n":
                # Create new session
                session_name = self.create_new_session()
                if session_name:
                    self.current_session = session_name
                    return True

            elif choice == "d":
                # Delete session
                self.delete_session_interactive()

            else:
                # Try to select session by number
                try:
                    sessions = self.session_manager.list_sessions()
                    session_num = int(choice) - 1

                    if 0 <= session_num < len(sessions):
                        self.current_session = sessions[session_num]["name"]
                        self.session_manager.update_last_used(self.current_session)
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {self.current_session}")
                        return True
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏")

                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

    def create_new_session(self) -> Optional[str]:
        """Create a new session interactively."""
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
        print("–ü–æ–ª—É—á–∏—Ç–µ api_id –∏ api_hash –Ω–∞ https://my.telegram.org")
        print("=" * 50)

        print("\nüìù –í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        api_id = input("API ID: ").strip()
        api_hash = input("API Hash: ").strip()
        phone = input(
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567): "
        ).strip()

        if not all([api_id, api_hash, phone]):
            print("‚ùå –û—à–∏–±–∫–∞: –≤—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
            return None

        # Generate session name
        session_name = self.session_manager.create_session_name(phone)

        # Check if session already exists
        if self.session_manager.session_exists(session_name):
            print(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            overwrite = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ").lower()
            if overwrite not in ["y", "yes", "–¥–∞", "–¥"]:
                return None

            # Delete existing session
            self.session_manager.delete_session(session_name)

        # Save session info
        self.session_manager.save_session_info(session_name, api_id, api_hash, phone)

        print(f"‚úÖ –°–µ—Å—Å–∏—è '{session_name}' —Å–æ–∑–¥–∞–Ω–∞")
        return session_name

    def delete_session_interactive(self):
        """Delete session interactively."""
        sessions = self.session_manager.list_sessions()
        if not sessions:
            print("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

        for i, session in enumerate(sessions, 1):
            print(f"  {i}. {session['name']} ({session['phone']})")

        try:
            choice = input("\n–ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (0 - –æ—Ç–º–µ–Ω–∞): ").strip()
            if choice == "0":
                return

            session_num = int(choice) - 1
            if 0 <= session_num < len(sessions):
                session_to_delete = sessions[session_num]["name"]

                confirm = input(
                    f"–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é '{session_to_delete}'? (y/n): "
                ).lower()
                if confirm in ["y", "yes", "–¥–∞", "–¥"]:
                    if self.session_manager.delete_session(session_to_delete):
                        print(f"‚úÖ –°–µ—Å—Å–∏—è '{session_to_delete}' —É–¥–∞–ª–µ–Ω–∞")

                        # Clear current session if it was deleted
                        if self.current_session == session_to_delete:
                            self.current_session = None
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏")

        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

    def get_current_session_path(self) -> Optional[str]:
        """Get path to current session file."""
        if self.current_session:
            return self.session_manager.get_session_path(self.current_session)
        return None

    def get_current_session_credentials(self) -> Optional[Dict]:
        """Get credentials for current session."""
        if self.current_session:
            return self.session_manager.get_session_credentials(self.current_session)
        return None

    def initialize_sessions(self):
        """Initialize session management, migrate old sessions if needed."""
        migrated_session = self.session_manager.migrate_old_session()
        if migrated_session:
            self.current_session = migrated_session
        else:
            # Try to auto-select the most recently used session
            sessions = self.session_manager.list_sessions()
            if sessions:
                self.current_session = sessions[0][
                    "name"
                ]  # Already sorted by last_used
